
<!DOCTYPE html>
<html>

<head>
	<title>AMT | Playground</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<script type="text/javascript" src="amt.js"></script>
	<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
	<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
	<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
	<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.20.0/vis.min.js"></script>
	<link href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.20.0/vis.min.css" rel="stylesheet" type="text/css" />
	<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.min.css">
	<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
	<style>
		* {
				margin: 0;
				padding: 0;
			}
			body {
				height: 100%;
				width: 100%;
				position: absolute;
				overflow: hidden;
				display: flex;
		    	min-height: 100vh;
		    	flex-direction: column;
			}
			#footer {
				height: 100px;
				color: black;
			}
			#graph {
				height: calc(100% - 100px);
			}
			.description {
				margin-left: 25px;
			}
			.modal {
				width: 90% !important;
				height: 90% !important;
			}
			div.info {
	            position: fixed;
	            top: 20px;
	            left: 20px;
	            width: auto;
	            height: auto;
	            border: 1px dashed grey;
	            background: #ffcc80;
	            padding-top: 0px;
	            padding-left: 15px;
	            padding-right: 15px;
	            padding-bottom: 15px;
	        }
	        div.logos {
	            position: fixed;
	            top: 20px;
	            right: 20px;
	            width: auto;
	            height: auto;
	        }
		</style>
	<script>
		var _AMT = {};
			_AMT.ontology = "kongeos";
			_AMT.graph = {};
			_AMT.prefix = "http://kongeos.de#"
			_AMT.edit = false;
			_AMT.thisNodes = [];
			_AMT.thisEdges = [];
			var update = function() {
				if (_AMT.amt) {
					var updated = _AMT.amt.getGraph(!_AMT.edit,true);
					_AMT.graph.edges.clear();
					_AMT.graph.nodes.clear();
					if (_AMT.ontology === "kongeos") {
						for (var i in updated.nodes) {
							updated.nodes[i].length = 10/updated.nodes[i].width;
							if (!_AMT.edit) {
								updated.nodes[i].chosen = false;
							}
							if (updated.nodes[i].concept === _AMT.prefix + "Person") {
								updated.nodes[i].color = {
									background: '#2979ff',
									border: '#2979ff',
									highlight: {
										background: '#2979ff',
										border: '#2979ff'
									}
								};
								updated.nodes[i].shape = "dot";
								updated.nodes[i].font = {
									size: 16,
									face: 'monospace'
								};
								updated.nodes[i].size = 20;
							}
							if (updated.nodes[i].concept === _AMT.prefix + "Interest") {
								updated.nodes[i].color = {
									background: '#ff1744',
									border: '#ff1744',
									highlight: {
										background: '#ff1744',
										border: '#ff1744'
									}
								};
								updated.nodes[i].shape = "dot";
								updated.nodes[i].font = {
									size: 16,
									face: 'monospace'
								};
								updated.nodes[i].size = 20;
							}
							if (updated.nodes[i].concept === _AMT.prefix + "State") {
								updated.nodes[i].color = {
									background: '#00e676',
									border: '#00e676',
									highlight: {
										background: '#00e676',
										border: '#00e676'
									}
								};
								updated.nodes[i].shape = "dot";
								updated.nodes[i].font = {
									size: 16,
									face: 'monospace'
								};
								updated.nodes[i].size = 20;
							}
						}

						var roleWithPrefix = _AMT.prefix;
						for (var i in updated.edges) {
							updated.edges[i].arrowStrikethrough = false;
		                    updated.edges[i].chosen = false;
		                    if (updated.edges[i].width < 0.0000001) {
		                        updated.edges[i].hidden = true;
		                    }
							if (updated.edges[i].role === roleWithPrefix +"connectedWith") {
								updated.edges[i].color = {
									color: "#2979ff",
									highlight: "black"
								};
								updated.edges[i].length = 200;
								updated.edges[i].smooth = false;
								updated.edges[i].label = Math.floor(updated.edges[i].width * 100) / 100;
								updated.edges[i].dashes = true;
								if (updated.edges[i].from.localeCompare(updated.edges[i].to) >= 0) {
									//updated.edges[i].hidden = true;
								}
							}
							if (updated.edges[i].role === roleWithPrefix +"interestedIn") {
									updated.edges[i].color = {
										color: "#ff1744",
										highlight: "black"
									};
									updated.edges[i].length = 200;
									updated.edges[i].smooth = false;
									updated.edges[i].label = Math.floor(updated.edges[i].width * 100) / 100;
									updated.edges[i].dashes = false;
								updated.edges[i].arrows = "to";
							}
							if (updated.edges[i].role === roleWithPrefix +"interestOf") {
								updated.edges[i].hidden = true;
							}
							if (updated.edges[i].role === roleWithPrefix +"hasState") {
								updated.edges[i].color = {
									color: "#00e676",
									highlight: "black"
								};
								updated.edges[i].length = 200;
								updated.edges[i].smooth = false;
								updated.edges[i].label = Math.floor(updated.edges[i].width * 100) / 100;
								updated.edges[i].dashes = false;
								updated.edges[i].arrows = "to";
							}
							if (updated.edges[i].role === roleWithPrefix +"stateOf") {
								updated.edges[i].hidden = true;
							}
						}
					}
					if (_AMT.ontology === "network") {
						for (var i in updated.nodes) {
							updated.nodes[i].length = 10/updated.nodes[i].width;
							if (!_AMT.edit) {
								updated.nodes[i].chosen = false;
							}
							if (updated.nodes[i].concept === _AMT.prefix + "Person") {
								updated.nodes[i].color = {
									background: '#2979ff',
									border: '#2979ff',
									highlight: {
										background: 'white',
										border: '#2979ff'
									}
								};
								updated.nodes[i].shape = "dot";
								updated.nodes[i].font = {
									size: 16,
									face: 'monospace'
								};
								updated.nodes[i].size = 20;
							}
							if (updated.nodes[i].concept === _AMT.prefix + "Interest") {
								updated.nodes[i].hidden = true;
							}
							if (updated.nodes[i].concept === _AMT.prefix + "State") {
								updated.nodes[i].hidden = true;
							}
						}

						var roleWithPrefix = _AMT.prefix;
						for (var i in updated.edges) {
							updated.edges[i].arrowStrikethrough = false;
		                    updated.edges[i].chosen = false;
		                    if (updated.edges[i].width < 0.0000001) {
		                        updated.edges[i].hidden = true;
		                    }
							if (updated.edges[i].role === roleWithPrefix +"connectedWith") {
								updated.edges[i].color = {
									color: "#2979ff",
									highlight: "black"
								};
								updated.edges[i].length = 400;
								updated.edges[i].smooth = false;
								updated.edges[i].label = Math.floor(updated.edges[i].width * 100) / 100;
								updated.edges[i].dashes = true;
							}
							if (updated.edges[i].role === roleWithPrefix +"interestedIn") {
								updated.edges[i].hidden = true;
							}
							if (updated.edges[i].role === roleWithPrefix +"interestOf") {
								updated.edges[i].hidden = true;
							}
							if (updated.edges[i].role === roleWithPrefix +"hasState") {
								updated.edges[i].hidden = true;
							}
							if (updated.edges[i].role === roleWithPrefix +"stateOf") {
								updated.edges[i].hidden = true;
							}
						}
					}
					_AMT.graph.nodes.update(updated.nodes);
					_AMT.graph.edges.update(updated.edges);
					_AMT.thisNodes = updated.nodes;
					_AMT.thisEdges = updated.edges;
				}
			};
			var edit = function() {
				_AMT.edit = !_AMT.edit;
				$(".edit").toggle();
				$(".normal").toggle();
				update();
			};
			var cancel = function() {
				_AMT.amt.cancel();
				$("#store").hide();
				edit();
			};
			var save = function() {
				_AMT.amt.save(function() {
					location.reload();
				});
			}
			var openModal = function(id,type) {
				$("#uri").val("");
				if (id) {
					$("#uri").val(id);
					var graph = _AMT.amt.getGraph(false,true);
					var node = false;
					for (var i in graph.nodes) {
						if (graph.nodes[i].id == id)
							node = graph.nodes[i];
					}
					type = node.concept;
					$("#label").val(node.label);
				}
				$("#concept").val(type);
				$("#role").empty();
				$("#table").empty();
				var concepts = _AMT.amt.getConcepts();
				for (var i in concepts) {
					if (concepts[i].concept == type) {
						$("#label").attr("placeholder",concepts[i].placeholder);
					}
				}
				$("#role").append("<option value='' disabled selected>Rolle wählen ...</option>");
				var roles = _AMT.amt.getRoles();
				for (var i in roles) {
					if (roles[i].role === _AMT.prefix + "connectedWith") {
						roles.splice(i, 1);
					}
					if (roles[i].role === _AMT.prefix + "interestOf") {
						roles.splice(i, 1);
					}
					if (roles[i].role === _AMT.prefix + "stateOf") {
						roles.splice(i, 1);
					}
				}
				for (var i in roles) {
					if (roles[i].domain == type) {
						$("#role").append("<option value='"+roles[i].role+"'>"+roles[i].label+"</option>");
					}
				}
				$("#role").on("change",function() {
					$("#table").empty();
					var concept = "";
					for (var i in roles) {
						if (roles[i].role == $("#role").val()) {
							concept = roles[i].range;
						}
					}
					var graph = _AMT.amt.getGraph(false,true);
					for (var i in graph.nodes) {
						if (graph.nodes[i].concept == concept) {
							var w = 0;
							if (id) {
								for (var j in graph.edges) {
									if (graph.edges[j].role == $("#role").val() && graph.edges[j].from == id && graph.edges[j].to == graph.nodes[i].id)
										w = graph.edges[j].width;
								}
							}
							var tr = $("<tr></tr>");
							tr.append("<td>"+graph.nodes[i].label+"</td>");
							tr.append("<td><p class='range-field'><input type='range' name='"+graph.nodes[i].id+"' min='0' max='100' value='"+w*100+"' /></p></td>");
							$("#table").append(tr);
						}
					}
				});
				$("#role").material_select();
				$("#modal").modal("open");
			};
			var remove = function() {
				var from = $("#uri").val();
				if (from) {
					$("#save").show();
					if (!_AMT.amt.removeIndividual(from)) {
						alert("Inkonsistenz vorhanden");
						$("#save").hide();
					}
				}
				$("#store").show();
				$("#modal").modal("close");
				$("#label").val("");
				update();
			}
			var cancelEdit = function() {
				$("#modal").modal("close");
				$("#label").val("");
			};
			var saveEdit = function() {
				var role = $("#role").val();
				var from = $("#uri").val();
				if (!from) {
					from = _AMT.amt.addIndividual($("#label").val(),$("#concept").val());
				}
				$("#save").show();
				$("#table tr td input").each(function(i) {
					var w = Math.floor(Number($(this).val()));
					var to = $(this).attr("name");
					var inconsistent = false;
					if (!_AMT.amt.editAssertion(role,from,to,w/100)) {
						if (!inconsistent)
							alert("Inkonsistenz vorhanden");
						inconsistent = true;
						$("#save").hide();
					}
				});
				$("#store").show();
				$("#modal").modal("close");
				$("#label").val("");
				update();
			};
			$(function() {
				_AMT.amt = new AMT();
				_AMT.amt.load(function() {
					var concepts = _AMT.amt.getConcepts();
					for (var i in concepts) {
						if (concepts[i].concept === _AMT.prefix + "Person") {
							var a = $("<a style='margin-left:3px;margin-right:3px;' class='btn-floating btn-large edit blue accent-3' onclick='openModal(false,\""+concepts[i].concept+"\")' title='Add "+concepts[i].label+" node'><i class='material-icons'>add"+concepts[i].label.substr(0,1)+"</i></a>");
							$("#buttons").prepend(a);
						}
						if (concepts[i].concept === _AMT.prefix + "Interest") {
							var a = $("<a style='margin-left:3px;margin-right:3px;'class='btn-floating btn-large edit red accent-3' onclick='openModal(false,\""+concepts[i].concept+"\")' title='Add "+concepts[i].label+" node'><i class='material-icons'>add"+concepts[i].label.substr(0,1)+"</i></a>");
							$("#buttons").prepend(a);
						}
						if (concepts[i].concept === _AMT.prefix + "State") {
							var a = $("<a style='margin-left:3px;margin-right:3px;'class='btn-floating btn-large edit green accent-3' onclick='openModal(false,\""+concepts[i].concept+"\")' title='Add "+concepts[i].label+" node'><i class='material-icons'>add"+concepts[i].label.substr(0,1)+"</i></a>");
							$("#buttons").prepend(a);
						}
					}
					$(".edit").hide();
					var graph = _AMT.amt.getGraph(true);
					_AMT.graph.nodes = new vis.DataSet(graph.nodes);
					_AMT.graph.edges = new vis.DataSet(graph.edges);
					var network = new vis.Network(document.getElementById("graph"),{nodes: _AMT.graph.nodes, edges: _AMT.graph.edges},{});
					network.on("selectNode", function (params) {
						if (_AMT.edit) {
							openModal(params.nodes[0]);
						} else {
							_AMT.selectedNode = params.nodes[0];
							openNetworkModal();
						}
					});
					update();
				});
				$("#modal").modal({
					complete: cancelEdit
				});
				$("#info").modal({
					complete: function() {info(true);}
				});
				$("#networkModal").modal({
					complete: function() {openNetworkModal(true);}
				});
				$("#exportModal").modal({
					complete: function() {exportOptions(true);}
				});
				$("#loadModal").modal({
					complete: function() {loadJSONGraph(true);}
				});
				$("#propertiesModal").modal({
					dismissible: false,
					complete: function() {loadJSONGraph(true);}
				});
				$(".edit").hide();
				$("#store").hide();
			});
			var info = function(close) {
				if (close)
					$("#info").modal("close");
				else
					$("#info").modal("open");
			}
			var exportOptions = function(close) {
				if (close)
					$("#exportModal").modal("close");
				else
					$("#exportModal").modal("open");
			}
			var loadJSONGraph = function(close) {
				$("#json").val("");
				$("#json").height(75);
				if (close)
					$("#loadModal").modal("close");
				else
					$("#loadModal").modal("open");
			}
			var propModal = function(close) {
				$("#ontology").material_select();
				$("#ontology").val(_AMT.ontology);
				if (close)
					$("#propertiesModal").modal("close");
				else
					$("#propertiesModal").modal("open");
			}
			var connectionView = function() {
					if (_AMT.ontology === "kongeos") {
						_AMT.ontology = "network";
						$("#network-btn").removeClass("black");
						$("#network-btn").addClass("red");
						update();
					} else {
						_AMT.ontology = "kongeos";
						$("#network-btn").removeClass("red");
						$("#network-btn").addClass("black");
						update();
					}
			}
			var openNetworkModal = function(close) {
				var networkEdges = "";
				for (var i in _AMT.thisEdges) {
					if (_AMT.thisEdges[i].role === "http://kongeos.de#connectedWith" && _AMT.thisEdges[i].from === _AMT.selectedNode) {
						var toNode;
						for (var j in _AMT.thisNodes) {
							if (_AMT.thisNodes[j].id === _AMT.thisEdges[i].to) {
								toNode = _AMT.thisNodes[j].label;
							}
						}
						networkEdges += toNode + " → " + _AMT.thisEdges[i].label + "\r\n";
					}
				}
				$("#network-tbl").val(networkEdges);
				if (close)
					$("#networkModal").modal("close");
				else
					$("#networkModal").modal("open");
			}
			var getNodeById = function(id) {

			}
			var exportData = function(type,kind) {
				if (type==="json") {
					var nodesAndEdges = {};
					nodesAndEdges.nodes = _AMT.thisNodes;
					nodesAndEdges.edges = _AMT.thisEdges;
					nodesAndEdges = JSON.stringify(nodesAndEdges);
					if (nodesAndEdges.includes("Infinity")) {
						nodesAndEdges = nodesAndEdges.replace("Infinity",1.0);
					}
					// COPY TO CLIPBOARD
					$("#hiddenclipboard").text(nodesAndEdges);
					copyToClipboard('#hiddenclipboard');
					// CLOSE MODAL
					//$("#exportModal").modal("close");
				} else if (type==="csv") {
					if (kind==="nodes") {
						var nodesAndEdges = "id,label,concept\r\n";
						for (var node in _AMT.thisNodes) {
							nodesAndEdges += _AMT.thisNodes[node].id.replace("http://academic-meta-tool.xyz/vocab#","")+","+_AMT.thisNodes[node].label+","+_AMT.thisNodes[node].concept.replace("http://kongeos.de#","")+"\r\n";
						}
						// COPY TO CLIPBOARD
						$("#hiddenclipboard").text(nodesAndEdges);
						copyToClipboard('#hiddenclipboard');
						// CLOSE MODAL
						//$("#exportModal").modal("close");
					} else {
						var nodesAndEdges = "from,to,role,width\r\n";
						for (var edge in _AMT.thisEdges) {
							if (!_AMT.thisEdges[edge].hidden) {
								nodesAndEdges += _AMT.thisEdges[edge].from.replace("http://academic-meta-tool.xyz/vocab#","")+","+_AMT.thisEdges[edge].to.replace("http://academic-meta-tool.xyz/vocab#","")+","+_AMT.thisEdges[edge].role.replace("http://kongeos.de#","")+","+_AMT.thisEdges[edge].width+"\r\n";
								if (nodesAndEdges.includes("Infinity")) {
									nodesAndEdges = nodesAndEdges.replace("Infinity",1.0);
								}
							}
						}
						// COPY TO CLIPBOARD
						$("#hiddenclipboard").text(nodesAndEdges);
						copyToClipboard('#hiddenclipboard');
						// CLOSE MODAL
						//$("#exportModal").modal("close");
					}
				} else if (type==="rdf") {
					var nodesAndEdges = "";
					for (var node in _AMT.thisNodes) {
						nodesAndEdges += "<"+_AMT.thisNodes[node].id+"> "+"<http://academic-meta-tool.xyz/vocab#instanceOf>"+" <"+_AMT.thisNodes[node].concept+"> .\r\n";
						nodesAndEdges += "<"+_AMT.thisNodes[node].id+"> "+"<http://www.w3.org/2000/01/rdf-schema#label>"+" \""+_AMT.thisNodes[node].label+"\" .\r\n";
					}
					for (var edge in _AMT.thisEdges) {
						var emptyNode = "_:"+StrID();
						nodesAndEdges += emptyNode+" <http://www.w3.org/1999/02/22-rdf-syntax-ns#subject>"+" <"+_AMT.thisEdges[edge].from+"> .\r\n";
						nodesAndEdges += emptyNode+" <http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate>"+" <"+_AMT.thisEdges[edge].role+"> .\r\n";
						nodesAndEdges += emptyNode+" <http://www.w3.org/1999/02/22-rdf-syntax-ns#object>"+" <"+_AMT.thisEdges[edge].to+"> .\r\n";
						nodesAndEdges += emptyNode+" <http://academic-meta-tool.xyz/vocab#weight>"+" \""+_AMT.thisEdges[edge].width+"\"^^<http://www.w3.org/2001/XMLSchema#integer> .\r\n";
						if (nodesAndEdges.includes("Infinity")) {
							nodesAndEdges = nodesAndEdges.replace("Infinity",1.0);
						}
					}
					// COPY TO CLIPBOARD
					$("#hiddenclipboard").text(nodesAndEdges);
					copyToClipboard('#hiddenclipboard');
					// CLOSE MODAL
					//$("#exportModal").modal("close");
				} else if (type==="cypher") {
					var nodesAndEdges = "";
					var map = [];
					var nodeIDs = [];
					// CREATE NODE -> CREATE (shortID:Concept{label: 'text'})
					for (var node in _AMT.thisNodes) {
						if (_AMT.thisNodes[node].concept.includes("Person")) {
							var nodeItem = {};
							nodeItem.id = _AMT.thisNodes[node].id;
							nodeItem.node = cypherNode;
							nodeItem.shortID = _AMT.thisNodes[node].id.replace("http://academic-meta-tool.xyz/vocab#","");
							nodeIDs.push(nodeItem.shortID);
							map.push(nodeItem);
							var cypherNode = "("+nodeItem.shortID+":Person{label: '"+_AMT.thisNodes[node].label+"'})";
							nodesAndEdges += "CREATE "+cypherNode+ "\r\n";
						} else if (_AMT.thisNodes[node].concept.includes("Interest")) {
							var nodeItem = {};
							nodeItem.id = _AMT.thisNodes[node].id;
							nodeItem.node = cypherNode;
							nodeItem.shortID = _AMT.thisNodes[node].id.replace("http://academic-meta-tool.xyz/vocab#","");
							nodeIDs.push(nodeItem.shortID);
							map.push(nodeItem);
							var cypherNode = "("+nodeItem.shortID+":Interest{label: '"+_AMT.thisNodes[node].label+"'})";
							nodesAndEdges += "CREATE "+cypherNode+ "\r\n";
						} else if (_AMT.thisNodes[node].concept.includes("State")) {
							var nodeItem = {};
							nodeItem.id = _AMT.thisNodes[node].id;
							nodeItem.node = cypherNode;
							nodeItem.shortID = _AMT.thisNodes[node].id.replace("http://academic-meta-tool.xyz/vocab#","");
							nodeIDs.push(nodeItem.shortID);
							map.push(nodeItem);
							var cypherNode = "("+nodeItem.shortID+":State{label: '"+_AMT.thisNodes[node].label+"'})";
							nodesAndEdges += "CREATE "+cypherNode+ "\r\n";
						}
					}
					// MERGE NODES AS EDGE -> MERGE (shortID)-[:ROLE{width:width}]->(shortID)
					for (var edge in _AMT.thisEdges) {
						if (_AMT.thisEdges[edge].role.includes("connectedWith") && !_AMT.thisEdges[edge].hidden) {
							var cypherEdge = "(*)-[:CONNECTED_WITH{width:%}]->(**)";
							for (var item in map) {
								if (map[item].id===_AMT.thisEdges[edge].from) {
									cypherEdge = cypherEdge.replace("*",map[item].shortID);
									cypherEdge = cypherEdge.replace("%",_AMT.thisEdges[edge].width);
									if (cypherEdge.includes("Infinity")) {
										cypherEdge = cypherEdge.replace("Infinity",1.0);
									}
								}
								if (map[item].id===_AMT.thisEdges[edge].to) {
									cypherEdge = cypherEdge.replace("**",map[item].shortID);
									cypherEdge = cypherEdge.replace("%",_AMT.thisEdges[edge].width);
									if (cypherEdge.includes("Infinity")) {
										cypherEdge = cypherEdge.replace("Infinity",1.0);
									}
								}
							}
							nodesAndEdges += "MERGE "+cypherEdge+ "\r\n";
						}
						if (_AMT.thisEdges[edge].role.includes("interestedIn") && !_AMT.thisEdges[edge].hidden) {
							var cypherEdge = "(*)-[:INTERESTED_IN{width:%}]->(**)";
							for (var item in map) {
								if (map[item].id===_AMT.thisEdges[edge].from) {
									cypherEdge = cypherEdge.replace("*",map[item].shortID);
									cypherEdge = cypherEdge.replace("%",_AMT.thisEdges[edge].width);
									if (cypherEdge.includes("Infinity")) {
										cypherEdge = cypherEdge.replace("Infinity",1.0);
									}
								}
								if (map[item].id===_AMT.thisEdges[edge].to) {
									cypherEdge = cypherEdge.replace("**",map[item].shortID);
									cypherEdge = cypherEdge.replace("%",_AMT.thisEdges[edge].width);
									if (cypherEdge.includes("Infinity")) {
										cypherEdge = cypherEdge.replace("Infinity",1.0);
									}
								}
							}
							nodesAndEdges += "MERGE "+cypherEdge+ "\r\n";
						}
						if (_AMT.thisEdges[edge].role.includes("hasState") && !_AMT.thisEdges[edge].hidden) {
							var cypherEdge = "(*)-[:HAS_STATE{width:%}]->(**)";
							for (var item in map) {
								if (map[item].id===_AMT.thisEdges[edge].from) {
									cypherEdge = cypherEdge.replace("*",map[item].shortID);
									cypherEdge = cypherEdge.replace("%",_AMT.thisEdges[edge].width);
									if (cypherEdge.includes("Infinity")) {
										cypherEdge = cypherEdge.replace("Infinity",1.0);
									}
								}
								if (map[item].id===_AMT.thisEdges[edge].to) {
									cypherEdge = cypherEdge.replace("**",map[item].shortID);
									cypherEdge = cypherEdge.replace("%",_AMT.thisEdges[edge].width);
									if (cypherEdge.includes("Infinity")) {
										cypherEdge = cypherEdge.replace("Infinity",1.0);
									}
								}
							}
							nodesAndEdges += "MERGE "+cypherEdge+ "\r\n";
						}
					}
					// ADD RETURN ALL NODES
					var returnCall = "RETURN ";
					for (var nodeID in nodeIDs) {
						returnCall += nodeIDs[nodeID] + ",";
					}
					nodesAndEdges += returnCall.slice(0, -1);
					// COPY TO CLIPBOARD
					$("#hiddenclipboard").text(nodesAndEdges);
					copyToClipboard('#hiddenclipboard');
					// CLOSE MODAL
					//$("#exportModal").modal("close");
				}
				//
				_AMT.rdf = nodesAndEdges;
				// OPEN MODAL
				$("#downloadcontent").val(nodesAndEdges);
			}
			var loadJSONGraphInApp = function() {
				var json = JSON.parse($("#json").val());
				for (var node in json.nodes) {
					_AMT.amt.addExistingIndividual(json.nodes[node].id,json.nodes[node].label,json.nodes[node].concept);
				}
				for (var edge in json.edges) {
					_AMT.amt.addExistingAssertion(json.edges[edge].id,json.edges[edge].role,json.edges[edge].from,json.edges[edge].to,json.edges[edge].width);
				}
				update();
				$("#loadModal").modal("close");
			}
		</script>
</head>

<body>
	<div id="graph" class="col s12"></div>
	<div id="footer" class="page-footer col s12 orange lighten-3">
		<div class="container">
			<div class="row">
				<div id="props" class="col s5 left-align">
					<a class="btn-floating btn-large black" onclick="info()" title="Information"><i class="material-icons">info_outline</i></a>
					<a class="btn-floating btn-large black" onclick="exportOptions()" title="Download Edges and Nodes"><i class="material-icons">file_download</i></a>
					<a class="btn-floating btn-large black" onclick="loadJSONGraph()" title="load JSON Graph"><i class="material-icons">file_upload</i></a>
					<a class="btn-floating btn-large black" onclick="connectionView()" title="view connections" id="network-btn"><i class="material-icons">supervisor_account</i></a>
				</div>
				<div id="buttons" class="col s6 right-align">
					<a class="btn-floating btn-large edit black" onclick="edit()" title="Close edit mode"><i class="material-icons">bubble_chart</i></a>
					<a class="btn-floating btn-large normal black" onclick="edit()" title="Open edit mode"><i class="material-icons">edit</i></a>
				</div>
				<div id="store" class="col s1 left-align">
					<div><a class="btn-floating btn-large edit red" onclick="cancel()" title="Cancel changes"><i class="material-icons">cancel</i></a></div>
					<div id="save"><a class="btn-floating btn-large normal black" onclick="save()" title="Save changes"><i class="material-icons">save</i></a></div>
				</div>
			</div>
		</div>
	</div>
	<div id="modal" class="modal">
		<input id="uri" hidden />
		<input id="concept" hidden />
		<div class="modal-content">
			<div class="row">
				<div class="input-field col s9">
					<input id="label" type="text" placeholder="-" />
					<label for="label">Label</label>
				</div>
				<div class="col s3 right-align">
					<a class="btn-floating btn-large red" onclick="remove()" title="Delete node"><i class="material-icons">delete</i></a>
					<a class="btn-floating btn-large green" onclick="saveEdit()" title="Save changes"><i class="material-icons">save</i></a>
					<a class="btn-floating btn-large blue" onclick="cancelEdit()" title="Cancel changes"><i class="material-icons">cancel</i></a>
				</div>
			</div>
			<div class="row">
				<div class="input-field col s12">
					<select id="role"></select>
					<label for="role">Relation</label>
				</div>
			</div>
			<div class="row">
				<table class="bordered col s12">
					<thead>
						<tr>
							<th>Individuum</th>
							<th>Gewicht</th>
						</tr>
					</thead>
					<tbody id="table"></tbody>
				</table>
			</div>
		</div>
	</div>
	<div id="info" class="modal">
		<div class="modal-content">
			<h4>Academic Meta Tool. AMT.</h4>
			<p><b>Über AMT</b></p>
			<br>
			<p>AMT bietet die Möglichkeit sämtlichen Kanten eine Gewichtung hinzuzufügen, um dadurch die Vagheit dieser Kante auszudrücken. Eine Beziehung zwischen zwei Knoten besteht also nur zu einem gewissen Grad. Dieser Grad, d.h. das Kantengewicht, wird
				üblicherweise in Prozent angegeben. AMT beinhaltet zusätzlich ein Verfahren, mit dem - unter Zuhilfenahme einer vordefinierten Ontologie - aus vorhandenen graphbasierten Daten automatisch Schlussfolgerungen gezogen werden können (Reasoning). Ein
				Prototyp des AMTs steht hier als Web-Anwendung zur Verfügung. In einer entwickelten Test-Ontologie können <b>Personen</b>, <b>Interessen</b> sowie <b>Stati</b> und deren Beziehungen in einem gewissen Grad zueinander modelliert werden. Diese
				Ontologie beinhaltet neben den genannten beiden Klassen weitere Relationen, so dass Personen und Interessen miteinander in Beziehung gesetzt werden können. Außerdem enthält die Ontologie Axiome, um automatisiert aus bestehenden Beziehungen neue
				Beziehungen generieren zu können.</p>
			<br>
			<p><b>How to?</b></p>
			<br>
			<p>
				1. Auswahl der Ontologie (hier das KonGeoS-Netzwerk).
				<br>
				2. Ggf. Laden eines JSON-Graphen über "Laden-Button."
				<br>
				3. Nodes und Edges im "Editmodus" erstellen, dazu "Edit-Button" klicken.
				<br>
				4. Node erstellen durch Klick auf "Add-Buttons" oder Node bearbeiten durch Klick auf einen Node.
				<br>
				5. Label, Relation und Gewicht im "Edit-Modal" modifizieren und mit "Save-Button" übernehmen (oder Änderungen verwerfen / Node löschen).
				<br>
				6. Über blauen "Reasoning-Button" in den Reasoning Modus kommen oder mit dem roten "Close-Button" die Änderungen verwerfen.
				<br>
				7. Graph exportieren über "Export-Button".
			</p>
			<br>
			<p><b>Export</b></p>
			<br>
			<p>
				Der Playground bietet (noch) keine Möglichkeit zum Speichern der Daten. Eine einfache Exportfunktion ist jedoch implementiert. Durch Klick auf den "Download-Button" kann der aktuell angezeigte Graph (egal ob im Editor- oder Reasoning-Modus) in
				drei Varianten exportiert werden. Es stehen hier ein <b>JSON-Object</b> mit allen Knoten und Kanten, <b>CSV-Strings</b>, jeweils für Nodes und Edges und ein <b>cypher-Statement</b> zum direkten Import z.B. in Neo4J zur Verfügung. Mit Klick auf
				einer der Funktionen wird ein String in die Zwischenablage kopiert.
			</p>
			<br>
			<p><b>Import</b></p>
			<br>
			<p>
				Nach einem Export in das "JSON-Format" kann über den "loadButton" ein bereits existierer AMT Graph geladen werden.
			</p>
			<br>
			<p><b>About</b></p>
			<br>
			<p>* AMT-Software by Martin Unold (i3mainz) & Florian Thiery (i3mainz, RGZM).
		</div>
	</div>
	<div id="exportModal" class="modal">
		<div class="modal-content">
			<h4>Export Data to Clipboard</h4>
			<table class="centered stripped">
				<thead>
					<tr>
						<th width="25%">JSON array</th>
						<th width="25%">CSV as edges,nodes</th>
						<th width="25%">CYPHER statements</th>
						<th width="25%">RDF</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><a class="btn-floating btn-large green" onclick="exportData('json')" title="Copy Edges and Nodes as JSON"><i class="material-icons">code</i></a></td>
						<td><a class="btn-floating btn-large green" onclick="exportData('csv','nodes')" title="Copy Nodes as CSV"><i class="material-icons">fiber_manual_record</i></a>
							&nbsp;&nbsp;
							<a class="btn-floating btn-large green" onclick="exportData('csv','edges')" title="Copy Edges as CSV"><i class="material-icons">arrow_forward</i></a></td>
						<td><a class="btn-floating btn-large green" onclick="exportData('cypher')" title="Copy Edges and Nodes as CYPHER"><i class="material-icons">input</i></a></td>
						<td><a class="btn-floating btn-large green" onclick="exportData('rdf')" title="Copy Edges as RDF"><i class="material-icons">share</i></a></td>
					</tr>
				</tbody>
			</table>
			<textarea id="hiddenclipboard" hidden></textarea>
			<textarea id="downloadcontent" style="width:100%;height:400px;font-family:'Courier New';font-size:12px;"></textarea>
		</div>
	</div>
	<div id="loadModal" class="modal">
		<div class="modal-content">
			<h4>Load JSON Graph</h4>
			<form class="col s12">
				<div class="row">
					<div class="input-field col s12">
						<i class="material-icons prefix">code</i>
						<textarea id="json" class="materialize-textarea"></textarea>
						<label for="json">JSON Graph</label>
					</div>
				</div>
			</form>
			<center><a class="btn-floating btn-large green" onclick="loadJSONGraphInApp()" title="load"><i class="material-icons">check</i></a></center>
		</div>
	</div>
	<div id="networkModal" class="modal">
		<div class="modal-content" style="width:100%;height:calc(100% - 50px);padding:20px;margin:0px;">
			<h4>Connections</h4>
			<textarea id="network-tbl" style="width:100%;height:100%;font-family:'Courier New';font-size:30px;padding:20px;"></textarea>
		</div>
	</div>
	<!-- Info DIV -->
	<div class="info">
		<h5>AMT. KonGeoS 2018, München.</h5>
		Software by Florian Thiery (RGZM) and Martin Unold (i3mainz).
		<br> Data concept by Florian Thiery (RGZM).
		<br><br>
		<a class="btn-floating btn-small black"><i class="material-icons">edit</i></a>&nbsp;<i>editing</i>
		&nbsp;&nbsp;&nbsp;&nbsp;
		<a class="btn-floating btn-small black"><i class="material-icons">bubble_chart</i></a>&nbsp;<i>reasoning</i>
		&nbsp;&nbsp;&nbsp;&nbsp;
		<a class="btn-floating btn-small black"><i class="material-icons">supervisor_account</i></a>&nbsp;<i>network on/off</i>
		<br><br>
		<a class="btn-floating btn-small black"><i class="material-icons">info_outline</i></a>&nbsp;<i>info</i>
		&nbsp;&nbsp;&nbsp;&nbsp;
		<a class="btn-floating btn-small black"><i class="material-icons">file_download</i></a>&nbsp;<i>download data</i>
		&nbsp;&nbsp;&nbsp;&nbsp;
		<a class="btn-floating btn-small black"><i class="material-icons">file_upload</i></a>&nbsp;<i>load JSON</i>
		<br><br>
		<a class="btn-floating btn-small blue accent-3"><i class='material-icons'>addP</i></a>&nbsp;<i>add Person</i>
		<a class="btn-floating btn-small red accent-3"><i class='material-icons'>addI</i></a>&nbsp;<i>add Interest</i>
		<a class="btn-floating btn-small green accent-3"><i class='material-icons'>addS</i></a>&nbsp;<i>add State</i>
	</div>
	<div class="logos">
		<a href="http://academic-meta-tool.xyz" target="_blank"><img src="amt_logos.png" height="200"></a>
	</div>
</body>

</html>
